

import t_if::*;
import p_rd::*;


//module master(input bit clk, output bit[31:0] addr, wr_data, output cmd, output bit req, input ack, input bit[31:0] rd_data);

//module master(input bit clk, input t_st in, input bit ack, input bit[31:0] rd, output t_st out);
module master(input bit clk, input t_st in, input t_rd rd, output t_st out);


enum {REQ, CMD, ACK} st = REQ;

bit[31:0] buff;


   always @(posedge clk) begin
	
	
		case(st)
		
		
			REQ: begin
			
					 out.req <= in.req;
					 st <= CMD;
				  end
				  
		
		   CMD: begin
			
					 out.cmd <= in.cmd;
					 out.addr <= in.addr;
					 
					 if(in.cmd)					 
					    out.data <= in.data;					
					 
					 st <= ACK;
				  end
				  				  

			ACK: if(rd.ack) begin
					 
					  if(!in.cmd)
					     buff <= rd.data;
					     //out.data <= rd.data;
						  
					  out.req <= 1'b0;
						//st_m <= REQ								
				  end
							
		endcase
		
	end
	
endmodule: master
