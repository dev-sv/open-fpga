

import t_if::*;
import p_rd::*;


//module slave(input bit clk, input bit[31:0] addr, wr_data, input cmd, input bit req, output bit ack, output bit[31:0] rd_data);
module slave(input bit clk, input t_st in, output t_rd rd);//output bit ack, output bit[31:0] data);

enum {REQ, WR, RD, ACK} st = REQ;

bit[31:0] mem[2];// = '{31'h10000001, 31'h12345678};

	
	always @(posedge clk) begin
			
		
		case(st)
		
		
			REQ: if(in.req) begin

					  rd.data <= 32'h5a; 	
					  st <= WR;		
				  end
				
			WR:  begin
		
					 if(in.cmd)
					    mem[in.addr] <= in.data; 					 
						 
					 st <= ACK;
				  end	
				  
			ACK: begin
			
					 rd.ack <= 1'b1;
					 st <= !in.cmd ? RD : REQ;
/*					 
					 if(!in.cmd)
					    st <= RD;
	             else st <= REQ;
*/					 
				  end	
				  
			RD:  begin
			
					 rd.data <= mem[in.addr];
					 //st <= REQ;
				  end	
				
		endcase
			
	end

endmodule: slave