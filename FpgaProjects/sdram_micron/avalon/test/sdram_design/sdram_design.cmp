	component sdram_design is
		port (
			clk_clk            : in    std_logic                     := 'X';             -- clk
			reset_reset_n      : in    std_logic                     := 'X';             -- reset_n
			sdram_dq           : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			sdram_address      : out   std_logic_vector(11 downto 0);                    -- address
			sdram_ba           : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_dqm          : out   std_logic_vector(1 downto 0);                     -- dqm
			sdram_osc          : out   std_logic;                                        -- osc
			sdram_cs           : out   std_logic;                                        -- cs
			sdram_we           : out   std_logic;                                        -- we
			sdram_ras          : out   std_logic;                                        -- ras
			sdram_cas          : out   std_logic;                                        -- cas
			sdram_led          : out   std_logic_vector(7 downto 0);                     -- led
			user_waitrequest   : out   std_logic;                                        -- waitrequest
			user_readdata      : out   std_logic_vector(15 downto 0);                    -- readdata
			user_readdatavalid : out   std_logic;                                        -- readdatavalid
			user_burstcount    : in    std_logic_vector(8 downto 0)  := (others => 'X'); -- burstcount
			user_writedata     : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			user_address       : in    std_logic_vector(23 downto 0) := (others => 'X'); -- address
			user_write         : in    std_logic                     := 'X';             -- write
			user_read          : in    std_logic                     := 'X';             -- read
			user_byteenable    : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			user_debugaccess   : in    std_logic                     := 'X'              -- debugaccess
		);
	end component sdram_design;

