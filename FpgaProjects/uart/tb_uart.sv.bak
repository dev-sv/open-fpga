
`timescale 10 ps / 10 ps


module tb_uart;


`include "../tb.h"

localparam int sz = 4;

conf_t::br baud = conf_t::br_115200;

enum {TX, TX_WAIT, RX, RX_WAIT, STOP} st = TX;

bit        osc, clk,
			  tx_busy,
			  rx_full,
			  en_tx = 1,
			  en_rx = 0;
			  
logic[7:0] val = 8'h35,
			  tx_data[sz],
           rx_data[sz];
			  
int        tx_id = 0,
           rx_id = 0; 

wire       w_tx_rx;


initial
begin

	forever
		#1 osc = ~osc;

end



	uart	#(.sz(sz))uart_mut(.osc(osc), .tx_data(tx_data), .tx(w_tx_rx), .en_tx(en_tx), .tx_busy(tx_busy),
	                         .rx_data(rx_data), .rx(w_tx_rx), .en_rx(en_rx), .rx_full(rx_full), .baud(baud), 
									 .clk(clk));		


						 
						 
	always @(posedge clk) begin
	
		
		case(st)
						 
				 
		 TX: if(!tx_busy) begin
				 					 
					 if(tx_id < sz) begin
					 
						 //$display("val = %x", val);
					 
				       tx_data[tx_id] <= val;
					    ++tx_id;
						 ++val;
						 						 
					 end
					 else begin
					 
							  tx_id <= 0;
					        //en_tx <= 1;
							  st <= RX;//TX_WAIT;
					 end		  
					 
				 end
				 
				 
			RX: begin			
						
					if(rx_full) begin
					
					   if(rx_id < sz) begin
						
							//`COMP(tx_data[rx_id], rx_data[rx_id], EQ);	
					      //$display("rx = %x", rx_data[rx_id]);
						   ++rx_id;
					   end
				      else begin
						
								 rx_id <= 0;
								 en_tx <= 1;
								 st <= TX;
						end
					end
					
				 end	
				 
		 			  
		default: ;			
				 
		endcase
		
	end

 
endmodule: tb_uart
