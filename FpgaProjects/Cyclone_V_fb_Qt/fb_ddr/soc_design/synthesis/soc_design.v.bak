// soc_design.v

// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module soc_design (
		input  wire        clk_clk,            //    clk.clk
		input  wire        ddr_chipselect,     //    ddr.chipselect
		input  wire [28:0] ddr_address,        //       .address
		input  wire        ddr_write,          //       .write
		input  wire        ddr_read,           //       .read
		input  wire [7:0]  ddr_byteenable,     //       .byteenable
		input  wire [63:0] ddr_writedata,      //       .writedata
		output wire [63:0] ddr_readdata,       //       .readdata
		output wire        ddr_waitrequest,    //       .waitrequest
		output wire        ddr_readdatavalid,  //       .readdatavalid
		output wire [14:0] memory_mem_a,       // memory.mem_a
		output wire [2:0]  memory_mem_ba,      //       .mem_ba
		output wire        memory_mem_ck,      //       .mem_ck
		output wire        memory_mem_ck_n,    //       .mem_ck_n
		output wire        memory_mem_cke,     //       .mem_cke
		output wire        memory_mem_cs_n,    //       .mem_cs_n
		output wire        memory_mem_ras_n,   //       .mem_ras_n
		output wire        memory_mem_cas_n,   //       .mem_cas_n
		output wire        memory_mem_we_n,    //       .mem_we_n
		output wire        memory_mem_reset_n, //       .mem_reset_n
		inout  wire [31:0] memory_mem_dq,      //       .mem_dq
		inout  wire [3:0]  memory_mem_dqs,     //       .mem_dqs
		inout  wire [3:0]  memory_mem_dqs_n,   //       .mem_dqs_n
		output wire        memory_mem_odt,     //       .mem_odt
		output wire [3:0]  memory_mem_dm,      //       .mem_dm
		input  wire        memory_oct_rzqin    //       .oct_rzqin
	);

	wire         hps_0_h2f_reset_reset;                         // hps_0:h2f_rst_n -> [rst_controller:reset_in0, rst_controller_001:reset_in0]
	wire  [31:0] half_rate_bridge_0_m1_readdata;                // mm_interconnect_0:half_rate_bridge_0_m1_readdata -> half_rate_bridge_0:avm_readdata
	wire         half_rate_bridge_0_m1_waitrequest;             // mm_interconnect_0:half_rate_bridge_0_m1_waitrequest -> half_rate_bridge_0:avm_waitrequest
	wire  [31:0] half_rate_bridge_0_m1_address;                 // half_rate_bridge_0:avm_address -> mm_interconnect_0:half_rate_bridge_0_m1_address
	wire         half_rate_bridge_0_m1_read;                    // half_rate_bridge_0:avm_read -> mm_interconnect_0:half_rate_bridge_0_m1_read
	wire   [3:0] half_rate_bridge_0_m1_byteenable;              // half_rate_bridge_0:avm_byteenable -> mm_interconnect_0:half_rate_bridge_0_m1_byteenable
	wire         half_rate_bridge_0_m1_readdatavalid;           // mm_interconnect_0:half_rate_bridge_0_m1_readdatavalid -> half_rate_bridge_0:avm_readdatavalid
	wire         half_rate_bridge_0_m1_write;                   // half_rate_bridge_0:avm_write -> mm_interconnect_0:half_rate_bridge_0_m1_write
	wire  [31:0] half_rate_bridge_0_m1_writedata;               // half_rate_bridge_0:avm_writedata -> mm_interconnect_0:half_rate_bridge_0_m1_writedata
	wire   [1:0] half_rate_bridge_0_m1_burstcount;              // half_rate_bridge_0:avm_burstcount -> mm_interconnect_0:half_rate_bridge_0_m1_burstcount
	wire   [1:0] mm_interconnect_0_hps_0_f2h_axi_slave_awburst; // mm_interconnect_0:hps_0_f2h_axi_slave_awburst -> hps_0:f2h_AWBURST
	wire   [4:0] mm_interconnect_0_hps_0_f2h_axi_slave_awuser;  // mm_interconnect_0:hps_0_f2h_axi_slave_awuser -> hps_0:f2h_AWUSER
	wire   [3:0] mm_interconnect_0_hps_0_f2h_axi_slave_arlen;   // mm_interconnect_0:hps_0_f2h_axi_slave_arlen -> hps_0:f2h_ARLEN
	wire   [3:0] mm_interconnect_0_hps_0_f2h_axi_slave_wstrb;   // mm_interconnect_0:hps_0_f2h_axi_slave_wstrb -> hps_0:f2h_WSTRB
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_wready;  // hps_0:f2h_WREADY -> mm_interconnect_0:hps_0_f2h_axi_slave_wready
	wire   [7:0] mm_interconnect_0_hps_0_f2h_axi_slave_rid;     // hps_0:f2h_RID -> mm_interconnect_0:hps_0_f2h_axi_slave_rid
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_rready;  // mm_interconnect_0:hps_0_f2h_axi_slave_rready -> hps_0:f2h_RREADY
	wire   [3:0] mm_interconnect_0_hps_0_f2h_axi_slave_awlen;   // mm_interconnect_0:hps_0_f2h_axi_slave_awlen -> hps_0:f2h_AWLEN
	wire   [7:0] mm_interconnect_0_hps_0_f2h_axi_slave_wid;     // mm_interconnect_0:hps_0_f2h_axi_slave_wid -> hps_0:f2h_WID
	wire   [3:0] mm_interconnect_0_hps_0_f2h_axi_slave_arcache; // mm_interconnect_0:hps_0_f2h_axi_slave_arcache -> hps_0:f2h_ARCACHE
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_wvalid;  // mm_interconnect_0:hps_0_f2h_axi_slave_wvalid -> hps_0:f2h_WVALID
	wire  [31:0] mm_interconnect_0_hps_0_f2h_axi_slave_araddr;  // mm_interconnect_0:hps_0_f2h_axi_slave_araddr -> hps_0:f2h_ARADDR
	wire   [2:0] mm_interconnect_0_hps_0_f2h_axi_slave_arprot;  // mm_interconnect_0:hps_0_f2h_axi_slave_arprot -> hps_0:f2h_ARPROT
	wire   [2:0] mm_interconnect_0_hps_0_f2h_axi_slave_awprot;  // mm_interconnect_0:hps_0_f2h_axi_slave_awprot -> hps_0:f2h_AWPROT
	wire  [31:0] mm_interconnect_0_hps_0_f2h_axi_slave_wdata;   // mm_interconnect_0:hps_0_f2h_axi_slave_wdata -> hps_0:f2h_WDATA
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_arvalid; // mm_interconnect_0:hps_0_f2h_axi_slave_arvalid -> hps_0:f2h_ARVALID
	wire   [3:0] mm_interconnect_0_hps_0_f2h_axi_slave_awcache; // mm_interconnect_0:hps_0_f2h_axi_slave_awcache -> hps_0:f2h_AWCACHE
	wire   [7:0] mm_interconnect_0_hps_0_f2h_axi_slave_arid;    // mm_interconnect_0:hps_0_f2h_axi_slave_arid -> hps_0:f2h_ARID
	wire   [1:0] mm_interconnect_0_hps_0_f2h_axi_slave_arlock;  // mm_interconnect_0:hps_0_f2h_axi_slave_arlock -> hps_0:f2h_ARLOCK
	wire   [1:0] mm_interconnect_0_hps_0_f2h_axi_slave_awlock;  // mm_interconnect_0:hps_0_f2h_axi_slave_awlock -> hps_0:f2h_AWLOCK
	wire  [31:0] mm_interconnect_0_hps_0_f2h_axi_slave_awaddr;  // mm_interconnect_0:hps_0_f2h_axi_slave_awaddr -> hps_0:f2h_AWADDR
	wire   [1:0] mm_interconnect_0_hps_0_f2h_axi_slave_bresp;   // hps_0:f2h_BRESP -> mm_interconnect_0:hps_0_f2h_axi_slave_bresp
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_arready; // hps_0:f2h_ARREADY -> mm_interconnect_0:hps_0_f2h_axi_slave_arready
	wire  [31:0] mm_interconnect_0_hps_0_f2h_axi_slave_rdata;   // hps_0:f2h_RDATA -> mm_interconnect_0:hps_0_f2h_axi_slave_rdata
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_awready; // hps_0:f2h_AWREADY -> mm_interconnect_0:hps_0_f2h_axi_slave_awready
	wire   [1:0] mm_interconnect_0_hps_0_f2h_axi_slave_arburst; // mm_interconnect_0:hps_0_f2h_axi_slave_arburst -> hps_0:f2h_ARBURST
	wire   [2:0] mm_interconnect_0_hps_0_f2h_axi_slave_arsize;  // mm_interconnect_0:hps_0_f2h_axi_slave_arsize -> hps_0:f2h_ARSIZE
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_bready;  // mm_interconnect_0:hps_0_f2h_axi_slave_bready -> hps_0:f2h_BREADY
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_rlast;   // hps_0:f2h_RLAST -> mm_interconnect_0:hps_0_f2h_axi_slave_rlast
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_wlast;   // mm_interconnect_0:hps_0_f2h_axi_slave_wlast -> hps_0:f2h_WLAST
	wire   [1:0] mm_interconnect_0_hps_0_f2h_axi_slave_rresp;   // hps_0:f2h_RRESP -> mm_interconnect_0:hps_0_f2h_axi_slave_rresp
	wire   [7:0] mm_interconnect_0_hps_0_f2h_axi_slave_awid;    // mm_interconnect_0:hps_0_f2h_axi_slave_awid -> hps_0:f2h_AWID
	wire   [7:0] mm_interconnect_0_hps_0_f2h_axi_slave_bid;     // hps_0:f2h_BID -> mm_interconnect_0:hps_0_f2h_axi_slave_bid
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_bvalid;  // hps_0:f2h_BVALID -> mm_interconnect_0:hps_0_f2h_axi_slave_bvalid
	wire   [2:0] mm_interconnect_0_hps_0_f2h_axi_slave_awsize;  // mm_interconnect_0:hps_0_f2h_axi_slave_awsize -> hps_0:f2h_AWSIZE
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_awvalid; // mm_interconnect_0:hps_0_f2h_axi_slave_awvalid -> hps_0:f2h_AWVALID
	wire   [4:0] mm_interconnect_0_hps_0_f2h_axi_slave_aruser;  // mm_interconnect_0:hps_0_f2h_axi_slave_aruser -> hps_0:f2h_ARUSER
	wire         mm_interconnect_0_hps_0_f2h_axi_slave_rvalid;  // hps_0:f2h_RVALID -> mm_interconnect_0:hps_0_f2h_axi_slave_rvalid
	wire  [31:0] hps_0_f2h_irq0_irq;                            // irq_mapper:sender_irq -> hps_0:f2h_irq_p0
	wire  [31:0] hps_0_f2h_irq1_irq;                            // irq_mapper_001:sender_irq -> hps_0:f2h_irq_p1
	wire         rst_controller_reset_out_reset;                // rst_controller:reset_out -> [half_rate_bridge_0:avm_reset_n, half_rate_bridge_0:avs_reset_n, mm_interconnect_0:half_rate_bridge_0_clk_m1_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;            // rst_controller_001:reset_out -> mm_interconnect_0:hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset

	altera_avalon_half_rate_bridge #(
		.AVM_DATA_WIDTH (32),
		.AVM_ADDR_WIDTH (32),
		.AVM_BYTE_WIDTH (4),
		.AVS_DATA_WIDTH (64),
		.AVS_ADDR_WIDTH (29),
		.AVS_BYTE_WIDTH (8)
	) half_rate_bridge_0 (
		.avs_clk           (clk_clk),                             //       clk_s1.clk
		.avs_reset_n       (~rst_controller_reset_out_reset),     // clk_s1_reset.reset_n
		.avm_clk           (clk_clk),                             //       clk_m1.clk
		.avm_reset_n       (~rst_controller_reset_out_reset),     // clk_m1_reset.reset_n
		.avs_chipselect    (ddr_chipselect),                      //           s1.chipselect
		.avs_address       (ddr_address),                         //             .address
		.avs_write         (ddr_write),                           //             .write
		.avs_read          (ddr_read),                            //             .read
		.avs_byteenable    (ddr_byteenable),                      //             .byteenable
		.avs_writedata     (ddr_writedata),                       //             .writedata
		.avs_readdata      (ddr_readdata),                        //             .readdata
		.avs_waitrequest   (ddr_waitrequest),                     //             .waitrequest
		.avs_readdatavalid (ddr_readdatavalid),                   //             .readdatavalid
		.avm_burstcount    (half_rate_bridge_0_m1_burstcount),    //           m1.burstcount
		.avm_address       (half_rate_bridge_0_m1_address),       //             .address
		.avm_write         (half_rate_bridge_0_m1_write),         //             .write
		.avm_read          (half_rate_bridge_0_m1_read),          //             .read
		.avm_byteenable    (half_rate_bridge_0_m1_byteenable),    //             .byteenable
		.avm_writedata     (half_rate_bridge_0_m1_writedata),     //             .writedata
		.avm_readdata      (half_rate_bridge_0_m1_readdata),      //             .readdata
		.avm_waitrequest   (half_rate_bridge_0_m1_waitrequest),   //             .waitrequest
		.avm_readdatavalid (half_rate_bridge_0_m1_readdatavalid)  //             .readdatavalid
	);

	soc_design_hps_0 #(
		.F2S_Width (1),
		.S2F_Width (0)
	) hps_0 (
		.mem_a       (memory_mem_a),                                  //        memory.mem_a
		.mem_ba      (memory_mem_ba),                                 //              .mem_ba
		.mem_ck      (memory_mem_ck),                                 //              .mem_ck
		.mem_ck_n    (memory_mem_ck_n),                               //              .mem_ck_n
		.mem_cke     (memory_mem_cke),                                //              .mem_cke
		.mem_cs_n    (memory_mem_cs_n),                               //              .mem_cs_n
		.mem_ras_n   (memory_mem_ras_n),                              //              .mem_ras_n
		.mem_cas_n   (memory_mem_cas_n),                              //              .mem_cas_n
		.mem_we_n    (memory_mem_we_n),                               //              .mem_we_n
		.mem_reset_n (memory_mem_reset_n),                            //              .mem_reset_n
		.mem_dq      (memory_mem_dq),                                 //              .mem_dq
		.mem_dqs     (memory_mem_dqs),                                //              .mem_dqs
		.mem_dqs_n   (memory_mem_dqs_n),                              //              .mem_dqs_n
		.mem_odt     (memory_mem_odt),                                //              .mem_odt
		.mem_dm      (memory_mem_dm),                                 //              .mem_dm
		.oct_rzqin   (memory_oct_rzqin),                              //              .oct_rzqin
		.h2f_rst_n   (hps_0_h2f_reset_reset),                         //     h2f_reset.reset_n
		.f2h_axi_clk (clk_clk),                                       // f2h_axi_clock.clk
		.f2h_AWID    (mm_interconnect_0_hps_0_f2h_axi_slave_awid),    // f2h_axi_slave.awid
		.f2h_AWADDR  (mm_interconnect_0_hps_0_f2h_axi_slave_awaddr),  //              .awaddr
		.f2h_AWLEN   (mm_interconnect_0_hps_0_f2h_axi_slave_awlen),   //              .awlen
		.f2h_AWSIZE  (mm_interconnect_0_hps_0_f2h_axi_slave_awsize),  //              .awsize
		.f2h_AWBURST (mm_interconnect_0_hps_0_f2h_axi_slave_awburst), //              .awburst
		.f2h_AWLOCK  (mm_interconnect_0_hps_0_f2h_axi_slave_awlock),  //              .awlock
		.f2h_AWCACHE (mm_interconnect_0_hps_0_f2h_axi_slave_awcache), //              .awcache
		.f2h_AWPROT  (mm_interconnect_0_hps_0_f2h_axi_slave_awprot),  //              .awprot
		.f2h_AWVALID (mm_interconnect_0_hps_0_f2h_axi_slave_awvalid), //              .awvalid
		.f2h_AWREADY (mm_interconnect_0_hps_0_f2h_axi_slave_awready), //              .awready
		.f2h_AWUSER  (mm_interconnect_0_hps_0_f2h_axi_slave_awuser),  //              .awuser
		.f2h_WID     (mm_interconnect_0_hps_0_f2h_axi_slave_wid),     //              .wid
		.f2h_WDATA   (mm_interconnect_0_hps_0_f2h_axi_slave_wdata),   //              .wdata
		.f2h_WSTRB   (mm_interconnect_0_hps_0_f2h_axi_slave_wstrb),   //              .wstrb
		.f2h_WLAST   (mm_interconnect_0_hps_0_f2h_axi_slave_wlast),   //              .wlast
		.f2h_WVALID  (mm_interconnect_0_hps_0_f2h_axi_slave_wvalid),  //              .wvalid
		.f2h_WREADY  (mm_interconnect_0_hps_0_f2h_axi_slave_wready),  //              .wready
		.f2h_BID     (mm_interconnect_0_hps_0_f2h_axi_slave_bid),     //              .bid
		.f2h_BRESP   (mm_interconnect_0_hps_0_f2h_axi_slave_bresp),   //              .bresp
		.f2h_BVALID  (mm_interconnect_0_hps_0_f2h_axi_slave_bvalid),  //              .bvalid
		.f2h_BREADY  (mm_interconnect_0_hps_0_f2h_axi_slave_bready),  //              .bready
		.f2h_ARID    (mm_interconnect_0_hps_0_f2h_axi_slave_arid),    //              .arid
		.f2h_ARADDR  (mm_interconnect_0_hps_0_f2h_axi_slave_araddr),  //              .araddr
		.f2h_ARLEN   (mm_interconnect_0_hps_0_f2h_axi_slave_arlen),   //              .arlen
		.f2h_ARSIZE  (mm_interconnect_0_hps_0_f2h_axi_slave_arsize),  //              .arsize
		.f2h_ARBURST (mm_interconnect_0_hps_0_f2h_axi_slave_arburst), //              .arburst
		.f2h_ARLOCK  (mm_interconnect_0_hps_0_f2h_axi_slave_arlock),  //              .arlock
		.f2h_ARCACHE (mm_interconnect_0_hps_0_f2h_axi_slave_arcache), //              .arcache
		.f2h_ARPROT  (mm_interconnect_0_hps_0_f2h_axi_slave_arprot),  //              .arprot
		.f2h_ARVALID (mm_interconnect_0_hps_0_f2h_axi_slave_arvalid), //              .arvalid
		.f2h_ARREADY (mm_interconnect_0_hps_0_f2h_axi_slave_arready), //              .arready
		.f2h_ARUSER  (mm_interconnect_0_hps_0_f2h_axi_slave_aruser),  //              .aruser
		.f2h_RID     (mm_interconnect_0_hps_0_f2h_axi_slave_rid),     //              .rid
		.f2h_RDATA   (mm_interconnect_0_hps_0_f2h_axi_slave_rdata),   //              .rdata
		.f2h_RRESP   (mm_interconnect_0_hps_0_f2h_axi_slave_rresp),   //              .rresp
		.f2h_RLAST   (mm_interconnect_0_hps_0_f2h_axi_slave_rlast),   //              .rlast
		.f2h_RVALID  (mm_interconnect_0_hps_0_f2h_axi_slave_rvalid),  //              .rvalid
		.f2h_RREADY  (mm_interconnect_0_hps_0_f2h_axi_slave_rready),  //              .rready
		.f2h_irq_p0  (hps_0_f2h_irq0_irq),                            //      f2h_irq0.irq
		.f2h_irq_p1  (hps_0_f2h_irq1_irq)                             //      f2h_irq1.irq
	);

	soc_design_mm_interconnect_0 mm_interconnect_0 (
		.hps_0_f2h_axi_slave_awid                                         (mm_interconnect_0_hps_0_f2h_axi_slave_awid),    //                                        hps_0_f2h_axi_slave.awid
		.hps_0_f2h_axi_slave_awaddr                                       (mm_interconnect_0_hps_0_f2h_axi_slave_awaddr),  //                                                           .awaddr
		.hps_0_f2h_axi_slave_awlen                                        (mm_interconnect_0_hps_0_f2h_axi_slave_awlen),   //                                                           .awlen
		.hps_0_f2h_axi_slave_awsize                                       (mm_interconnect_0_hps_0_f2h_axi_slave_awsize),  //                                                           .awsize
		.hps_0_f2h_axi_slave_awburst                                      (mm_interconnect_0_hps_0_f2h_axi_slave_awburst), //                                                           .awburst
		.hps_0_f2h_axi_slave_awlock                                       (mm_interconnect_0_hps_0_f2h_axi_slave_awlock),  //                                                           .awlock
		.hps_0_f2h_axi_slave_awcache                                      (mm_interconnect_0_hps_0_f2h_axi_slave_awcache), //                                                           .awcache
		.hps_0_f2h_axi_slave_awprot                                       (mm_interconnect_0_hps_0_f2h_axi_slave_awprot),  //                                                           .awprot
		.hps_0_f2h_axi_slave_awuser                                       (mm_interconnect_0_hps_0_f2h_axi_slave_awuser),  //                                                           .awuser
		.hps_0_f2h_axi_slave_awvalid                                      (mm_interconnect_0_hps_0_f2h_axi_slave_awvalid), //                                                           .awvalid
		.hps_0_f2h_axi_slave_awready                                      (mm_interconnect_0_hps_0_f2h_axi_slave_awready), //                                                           .awready
		.hps_0_f2h_axi_slave_wid                                          (mm_interconnect_0_hps_0_f2h_axi_slave_wid),     //                                                           .wid
		.hps_0_f2h_axi_slave_wdata                                        (mm_interconnect_0_hps_0_f2h_axi_slave_wdata),   //                                                           .wdata
		.hps_0_f2h_axi_slave_wstrb                                        (mm_interconnect_0_hps_0_f2h_axi_slave_wstrb),   //                                                           .wstrb
		.hps_0_f2h_axi_slave_wlast                                        (mm_interconnect_0_hps_0_f2h_axi_slave_wlast),   //                                                           .wlast
		.hps_0_f2h_axi_slave_wvalid                                       (mm_interconnect_0_hps_0_f2h_axi_slave_wvalid),  //                                                           .wvalid
		.hps_0_f2h_axi_slave_wready                                       (mm_interconnect_0_hps_0_f2h_axi_slave_wready),  //                                                           .wready
		.hps_0_f2h_axi_slave_bid                                          (mm_interconnect_0_hps_0_f2h_axi_slave_bid),     //                                                           .bid
		.hps_0_f2h_axi_slave_bresp                                        (mm_interconnect_0_hps_0_f2h_axi_slave_bresp),   //                                                           .bresp
		.hps_0_f2h_axi_slave_bvalid                                       (mm_interconnect_0_hps_0_f2h_axi_slave_bvalid),  //                                                           .bvalid
		.hps_0_f2h_axi_slave_bready                                       (mm_interconnect_0_hps_0_f2h_axi_slave_bready),  //                                                           .bready
		.hps_0_f2h_axi_slave_arid                                         (mm_interconnect_0_hps_0_f2h_axi_slave_arid),    //                                                           .arid
		.hps_0_f2h_axi_slave_araddr                                       (mm_interconnect_0_hps_0_f2h_axi_slave_araddr),  //                                                           .araddr
		.hps_0_f2h_axi_slave_arlen                                        (mm_interconnect_0_hps_0_f2h_axi_slave_arlen),   //                                                           .arlen
		.hps_0_f2h_axi_slave_arsize                                       (mm_interconnect_0_hps_0_f2h_axi_slave_arsize),  //                                                           .arsize
		.hps_0_f2h_axi_slave_arburst                                      (mm_interconnect_0_hps_0_f2h_axi_slave_arburst), //                                                           .arburst
		.hps_0_f2h_axi_slave_arlock                                       (mm_interconnect_0_hps_0_f2h_axi_slave_arlock),  //                                                           .arlock
		.hps_0_f2h_axi_slave_arcache                                      (mm_interconnect_0_hps_0_f2h_axi_slave_arcache), //                                                           .arcache
		.hps_0_f2h_axi_slave_arprot                                       (mm_interconnect_0_hps_0_f2h_axi_slave_arprot),  //                                                           .arprot
		.hps_0_f2h_axi_slave_aruser                                       (mm_interconnect_0_hps_0_f2h_axi_slave_aruser),  //                                                           .aruser
		.hps_0_f2h_axi_slave_arvalid                                      (mm_interconnect_0_hps_0_f2h_axi_slave_arvalid), //                                                           .arvalid
		.hps_0_f2h_axi_slave_arready                                      (mm_interconnect_0_hps_0_f2h_axi_slave_arready), //                                                           .arready
		.hps_0_f2h_axi_slave_rid                                          (mm_interconnect_0_hps_0_f2h_axi_slave_rid),     //                                                           .rid
		.hps_0_f2h_axi_slave_rdata                                        (mm_interconnect_0_hps_0_f2h_axi_slave_rdata),   //                                                           .rdata
		.hps_0_f2h_axi_slave_rresp                                        (mm_interconnect_0_hps_0_f2h_axi_slave_rresp),   //                                                           .rresp
		.hps_0_f2h_axi_slave_rlast                                        (mm_interconnect_0_hps_0_f2h_axi_slave_rlast),   //                                                           .rlast
		.hps_0_f2h_axi_slave_rvalid                                       (mm_interconnect_0_hps_0_f2h_axi_slave_rvalid),  //                                                           .rvalid
		.hps_0_f2h_axi_slave_rready                                       (mm_interconnect_0_hps_0_f2h_axi_slave_rready),  //                                                           .rready
		.clk_0_clk_clk                                                    (clk_clk),                                       //                                                  clk_0_clk.clk
		.half_rate_bridge_0_clk_m1_reset_reset_bridge_in_reset_reset      (rst_controller_reset_out_reset),                //      half_rate_bridge_0_clk_m1_reset_reset_bridge_in_reset.reset
		.hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),            // hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset.reset
		.half_rate_bridge_0_m1_address                                    (half_rate_bridge_0_m1_address),                 //                                      half_rate_bridge_0_m1.address
		.half_rate_bridge_0_m1_waitrequest                                (half_rate_bridge_0_m1_waitrequest),             //                                                           .waitrequest
		.half_rate_bridge_0_m1_burstcount                                 (half_rate_bridge_0_m1_burstcount),              //                                                           .burstcount
		.half_rate_bridge_0_m1_byteenable                                 (half_rate_bridge_0_m1_byteenable),              //                                                           .byteenable
		.half_rate_bridge_0_m1_read                                       (half_rate_bridge_0_m1_read),                    //                                                           .read
		.half_rate_bridge_0_m1_readdata                                   (half_rate_bridge_0_m1_readdata),                //                                                           .readdata
		.half_rate_bridge_0_m1_readdatavalid                              (half_rate_bridge_0_m1_readdatavalid),           //                                                           .readdatavalid
		.half_rate_bridge_0_m1_write                                      (half_rate_bridge_0_m1_write),                   //                                                           .write
		.half_rate_bridge_0_m1_writedata                                  (half_rate_bridge_0_m1_writedata)                //                                                           .writedata
	);

	soc_design_irq_mapper irq_mapper (
		.clk        (),                   //       clk.clk
		.reset      (),                   // clk_reset.reset
		.sender_irq (hps_0_f2h_irq0_irq)  //    sender.irq
	);

	soc_design_irq_mapper irq_mapper_001 (
		.clk        (),                   //       clk.clk
		.reset      (),                   // clk_reset.reset
		.sender_irq (hps_0_f2h_irq1_irq)  //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~hps_0_h2f_reset_reset),         // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~hps_0_h2f_reset_reset),             // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
